{"version":3,"file":"implementation.js","sourceRoot":"","sources":["../../src/implementation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AA6JjD,MAAM,CAAC,MAAM,mBAAmB,GAAG,cAAc,CAC/C,qBAAqB,EACrB;IACE,GAAG,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,sBAAsB,EAAE,CAAC;CACrE,CACF,CAAC","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\nimport { registerPlugin } from '@capacitor/core';\n\nimport type {\n  CameraConfig,\n  GoogleMapConfig,\n  MapPadding,\n  MapType,\n  Marker,\n} from './definitions';\n\nexport interface CreateMapArgs {\n  id: string;\n  apiKey: string;\n  config: GoogleMapConfig;\n  element: HTMLElement;\n  forceCreate?: boolean;\n}\n\nexport interface DestroyMapArgs {\n  id: string;\n}\n\nexport interface RemoveMarkerArgs {\n  id: string;\n  markerId: string;\n}\n\nexport interface RemoveMarkersArgs {\n  id: string;\n  markerIds: string[];\n}\n\nexport interface AddMarkerArgs {\n  id: string;\n  marker: Marker;\n}\n\nexport interface CameraArgs {\n  id: string;\n  config: CameraConfig;\n}\n\nexport interface MapTypeArgs {\n  id: string;\n  mapType: MapType;\n}\n\nexport interface IndoorMapArgs {\n  id: string;\n  enabled: boolean;\n}\n\nexport interface TrafficLayerArgs {\n  id: string;\n  enabled: boolean;\n}\n\nexport interface AccElementsArgs {\n  id: string;\n  enabled: boolean;\n}\n\nexport interface PaddingArgs {\n  id: string;\n  padding: MapPadding;\n}\n\nexport interface CurrentLocArgs {\n  id: string;\n  enabled: boolean;\n}\nexport interface AddMarkersArgs {\n  id: string;\n  markers: Marker[];\n}\n\nexport interface OnScrollArgs {\n  id: string;\n  mapBounds: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n}\n\nexport type MapListenerCallback = (data: any) => void;\n\nexport interface CapacitorGoogleMapsPlugin {\n  create(options: CreateMapArgs): Promise<void>;\n  addMarker(args: AddMarkerArgs): Promise<{ id: string }>;\n  addMarkers(args: AddMarkersArgs): Promise<{ ids: string[] }>;\n  removeMarker(args: RemoveMarkerArgs): Promise<void>;\n  removeMarkers(args: RemoveMarkersArgs): Promise<void>;\n  enableClustering(args: { id: string }): Promise<void>;\n  disableClustering(args: { id: string }): Promise<void>;\n  destroy(args: DestroyMapArgs): Promise<void>;\n  setCamera(args: CameraArgs): Promise<void>;\n  setMapType(args: MapTypeArgs): Promise<void>;\n  enableIndoorMaps(args: IndoorMapArgs): Promise<void>;\n  enableTrafficLayer(args: TrafficLayerArgs): Promise<void>;\n  enableAccessibilityElements(args: AccElementsArgs): Promise<void>;\n  enableCurrentLocation(args: CurrentLocArgs): Promise<void>;\n  setPadding(args: PaddingArgs): Promise<void>;\n  onScroll(args: OnScrollArgs): Promise<void>;\n\n  addListener(\n    eventName: 'onCameraIdle',\n    listenerFunc: MapListenerCallback,\n  ): PluginListenerHandle;\n\n  addListener(\n    eventName: 'onCameraMoveStarted',\n    listenerFunc: MapListenerCallback,\n  ): PluginListenerHandle;\n\n  addListener(\n    eventName: 'onClusterClick',\n    listenerFunc: MapListenerCallback,\n  ): PluginListenerHandle;\n\n  addListener(\n    eventName: 'onClusterInfoWindowClick',\n    listenerFunc: MapListenerCallback,\n  ): PluginListenerHandle;\n\n  addListener(\n    eventName: 'onInfoWindowClick',\n    listenerFunc: MapListenerCallback,\n  ): PluginListenerHandle;\n\n  addListener(\n    eventName: 'onMapReady',\n    listenerFunc: MapListenerCallback,\n  ): PluginListenerHandle;\n\n  addListener(\n    eventName: 'onMapClick',\n    listenerFunc: MapListenerCallback,\n  ): PluginListenerHandle;\n\n  addListener(\n    eventName: 'onMarkerClick',\n    listenerFunc: MapListenerCallback,\n  ): PluginListenerHandle;\n\n  addListener(\n    eventName: 'onMyLocationButtonClick',\n    listenerFunc: MapListenerCallback,\n  ): PluginListenerHandle;\n\n  addListener(\n    eventName: 'onMyLocationClick',\n    listenerFunc: MapListenerCallback,\n  ): PluginListenerHandle;\n}\n\nexport const CapacitorGoogleMaps = registerPlugin<CapacitorGoogleMapsPlugin>(\n  'CapacitorGoogleMaps',\n  {\n    web: () => import('./web').then(m => new m.CapacitorGoogleMapsWeb()),\n  },\n);\n"]}